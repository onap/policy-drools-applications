#
#
# This is test set that tests configurable SQL PIP engine. It uses sample data from MySQL world database
#
# http://dev.mysql.com/doc/world-setup/en/index.html
#
# The Policy was created using the PAP Admin Tool.
#
#

#
# Default XACML Properties File
# Standard API Factories
#
xacml.dataTypeFactory=com.att.research.xacml.std.StdDataTypeFactory
xacml.pdpEngineFactory=com.att.research.xacmlatt.pdp.ATTPDPEngineFactory
xacml.pepEngineFactory=com.att.research.xacml.std.pep.StdEngineFactory
xacml.pipFinderFactory=com.att.research.xacml.std.pip.StdPIPFinderFactory
xacml.traceEngineFactory=com.att.research.xacml.std.trace.LoggingTraceEngineFactory
#
# AT&T PDP Implementation Factories
#
xacml.att.evaluationContextFactory=com.att.research.xacmlatt.pdp.std.StdEvaluationContextFactory
xacml.att.combiningAlgorithmFactory=com.att.research.xacmlatt.pdp.std.StdCombiningAlgorithmFactory
xacml.att.functionDefinitionFactory=com.att.research.xacmlatt.pdp.std.StdFunctionDefinitionFactory
xacml.att.policyFinderFactory=com.att.research.xacmlatt.pdp.std.StdPolicyFinderFactory

#
# NOTE: If you are testing against a RESTful PDP, then the PDP must be configured with the
# policies and PIP configuration as defined below. Otherwise, this is the configuration that
# the embedded PDP uses.
#

# Policies to load
#
xacml.rootPolicies=sql
sql.file=src/test/resources/xacml/frequency_limiter_2.xml

# PIP Engine Definition
#
xacml.pip.engines=sql1

sql1.classname=com.att.research.xacml.std.pip.engines.jdbc.JDBCEngine
sql1.name=World
sql1.description=World Database from MySQL website. Copyright Statistics Finland, http://www.stat.fi/worldinfigures.
# This will be the default issuer for the resolvers. NOTE: Issuer only used for attributes provided by the engine.
sql1.issuer=com:att:research:xacml:test:sql
#
# This is the configuration for JDBC. You will have to setup the database and run the data\world*.sql script to
# create the tables and load the data. 
#
sql1.type=jdbc

# Postgres DB
#sql1.jdbc.driver=org.postgresql.Driver
#sql1.jdbc.url=jdbc:postgresql://localhost:7778/postgres
#sql1.jdbc.conn.user=postgres
#sql1.jdbc.conn.password=

# MariaDB
sql1.jdbc.driver=org.mariadb.jdbc.Driver
sql1.jdbc.url=jdbc:mariadb://localhost:7779/policy
sql1.jdbc.conn.user=root
sql1.jdbc.conn.password=lmpg

#
# This is the configuration for JNDI datasource.
#
#sql1.type=jndi
#sql1.datasource=jdbc/xacml

sql1.resolvers=langer

sql1.resolver.langer.classname=com.att.research.xacml.std.pip.engines.jdbc.ConfigurableJDBCResolver
sql1.resolver.langer.name=Language
sql1.resolver.langer.description=This returns the number of previous operations within the given time window

# Query for Postgres DB
#sql1.resolver.langer.select=select count(*) from operationshistory where  actor=? and operation=? and target=? and endtime between now()::timestamp with time zone - (interval '1000000000s') and now()::timestamp with time zone

# Query for MariaDB
#sql1.resolver.langer.select=select count(*) as count from operationshistory where actor=? and operation=? and target=? and convert_tz(endtime,@@session.time_zone,'-05:00') between date_sub(convert_tz(now(),@@session.time_zone,'-05:00'),interval 100 hour) and convert_tz(now(),@@session.time_zone,'-05:00')
sql1.resolver.langer.select=select starttime as starttimebag from operationshistory9 where actor=? and operation=? and target=? and endtime between date_sub(now(),interval 100 hour) and now()

#sql1.resolver.langer.fields=count
sql1.resolver.langer.fields=starttimebag
sql1.resolver.langer.field.starttimebag.id=com:att:research:xacml:test:sql:resource:operations:starttimebag
sql1.resolver.langer.field.starttimebag.datatype=http://www.w3.org/2001/XMLSchema#dateTime
sql1.resolver.langer.field.starttimebag.category=urn:oasis:names:tc:xacml:3.0:attribute-category:resource


#You can override the default issuer that is set in the JDBCEngine definition if you want.
#sql1.resolver.langer.field.language.issuer=com:att:research:xacml:test:sql
sql1.resolver.langer.parameters=actor,operation,target

sql1.resolver.langer.parameter.actor.id=urn:oasis:names:tc:xacml:1.0:actor:actor-id
sql1.resolver.langer.parameter.actor.datatype=http://www.w3.org/2001/XMLSchema#string
sql1.resolver.langer.parameter.actor.category=urn:oasis:names:tc:xacml:1.0:subject-category:access-subject

sql1.resolver.langer.parameter.operation.id=urn:oasis:names:tc:xacml:1.0:operation:operation-id
sql1.resolver.langer.parameter.operation.datatype=http://www.w3.org/2001/XMLSchema#string
sql1.resolver.langer.parameter.operation.category=urn:oasis:names:tc:xacml:3.0:attribute-category:action

sql1.resolver.langer.parameter.target.id=urn:oasis:names:tc:xacml:1.0:target:target-id
sql1.resolver.langer.parameter.target.datatype=http://www.w3.org/2001/XMLSchema#string
sql1.resolver.langer.parameter.target.category=urn:oasis:names:tc:xacml:3.0:attribute-category:resource

#
# These properties are for an attribute generator to build into requests.
#
xacml.attribute.generator=generate_subjectid

xacml.attribute.generator.generate_subjectid.file=generate.data
xacml.attribute.generator.generate_subjectid.attributes=city

xacml.attribute.generator.generate_subjectid.attributes.city.category=urn:oasis:names:tc:xacml:3.0:attribute-category:resource
xacml.attribute.generator.generate_subjectid.attributes.city.datatype=http://www.w3.org/2001/XMLSchema#string
xacml.attribute.generator.generate_subjectid.attributes.city.id=urn:oasis:names:tc:xacml:1.0:resource:resource-id
xacml.attribute.generator.generate_subjectid.attributes.city.field=0

