<?xml version="1.0" encoding="UTF-8"?>
<!--
  ============LICENSE_START=======================================================
  ONAP Policy Drools Applications
  ================================================================================
  Copyright (C) 2025 OpenInfra Foundation Europe. All rights reserved.
  ================================================================================
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  ============LICENSE_END=========================================================
  -->
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="PDP-D Stability">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="API_HOST" elementType="Argument">
            <stringProp name="Argument.name">API_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_PORT" elementType="Argument">
            <stringProp name="Argument.name">API_PORT</stringProp>
            <stringProp name="Argument.value">30002</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PAP_HOST" elementType="Argument">
            <stringProp name="Argument.name">PAP_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PAP_PORT" elementType="Argument">
            <stringProp name="Argument.name">PAP_PORT</stringProp>
            <stringProp name="Argument.value">30003</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KAFKA_HOST" elementType="Argument">
            <stringProp name="Argument.name">KAFKA_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KAFKA_PORT" elementType="Argument">
            <stringProp name="Argument.name">KAFKA_PORT</stringProp>
            <stringProp name="Argument.value">29092</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DROOLS_HOST" elementType="Argument">
            <stringProp name="Argument.name">DROOLS_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DROOLS_PORT" elementType="Argument">
            <stringProp name="Argument.name">DROOLS_PORT</stringProp>
            <stringProp name="Argument.value">30005</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP" elementType="Argument">
            <stringProp name="Argument.name">HTTP</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
            <stringProp name="Authorization.username">policyadmin</stringProp>
            <stringProp name="Authorization.password">zb!XztG34</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
            <stringProp name="Authorization.username">policyadmin</stringProp>
            <stringProp name="Authorization.password">zb!XztG34</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${HTTP}://${DROOLS_HOST}:${DROOLS_PORT}/policy/pdp/engine</stringProp>
            <stringProp name="Authorization.username">demo@people.osaaf.org</stringProp>
            <stringProp name="Authorization.password">demo123456!</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.port">9696</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Set up">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="API" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API Healthcheck">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">/policy/api/v1/healthcheck</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion">
              <stringProp name="JSON_PATH">$.healthy</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create vCPE Policy">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.operational.common.Drools/versions/1.0.0/policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
      {&#xd;
        &quot;operational.restart&quot;: {&#xd;
          &quot;type&quot;: &quot;onap.policies.controlloop.operational.common.Drools&quot;,&#xd;
          &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;policy-id&quot;: &quot;operational.restart&quot;&#xd;
          },&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;id&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
            &quot;timeout&quot;: 60,&#xd;
            &quot;abatement&quot;: false,&#xd;
            &quot;trigger&quot;: &quot;unique-policy-id-1-restart&quot;,&#xd;
            &quot;operations&quot;: [&#xd;
              {&#xd;
                &quot;id&quot;: &quot;unique-policy-id-1-restart&quot;,&#xd;
                &quot;description&quot;: &quot;Restart the VM&quot;,&#xd;
                &quot;operation&quot;: {&#xd;
                  &quot;actor&quot;: &quot;APPC&quot;,&#xd;
                  &quot;operation&quot;: &quot;Restart&quot;,&#xd;
                  &quot;target&quot;: {&#xd;
                    &quot;targetType&quot;: &quot;VNF&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;timeout&quot;: 20,&#xd;
                &quot;retries&quot;: 0,&#xd;
                &quot;success&quot;: &quot;final_success&quot;,&#xd;
                &quot;failure&quot;: &quot;final_failure&quot;,&#xd;
                &quot;failure_timeout&quot;: &quot;final_failure_timeout&quot;,&#xd;
                &quot;failure_retries&quot;: &quot;final_failure_retries&quot;,&#xd;
                &quot;failure_exception&quot;: &quot;final_failure_exception&quot;,&#xd;
                &quot;failure_guard&quot;: &quot;final_failure_guard&quot;&#xd;
              }&#xd;
            ],&#xd;
            &quot;controllerName&quot;: &quot;usecases&quot;&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create 5G SON O1 Policy" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.operational.common.Drools/versions/1.0.0/policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
      {&#xd;
        &quot;op.5g.son.o1&quot;: {&#xd;
          &quot;type&quot;: &quot;onap.policies.controlloop.operational.common.Drools&quot;,&#xd;
          &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;name&quot;: &quot;op.5g.son.o1&quot;,&#xd;
          &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;policy-id&quot;: &quot;op.5g.son.o1&quot;&#xd;
          },&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;id&quot;: &quot;ControlLoop-SONO1-fb41f388-a5f2-11e8-98d0-529269fb1459&quot;,&#xd;
            &quot;timeout&quot;: 1200,&#xd;
            &quot;abatement&quot;: false,&#xd;
            &quot;trigger&quot;: &quot;modify-o1-config&quot;,&#xd;
            &quot;operations&quot;: [&#xd;
              {&#xd;
                &quot;id&quot;: &quot;modify-o1-config&quot;,&#xd;
                &quot;description&quot;: &quot;Control Loop Modify O1 Configuration&quot;,&#xd;
                &quot;operation&quot;: {&#xd;
                  &quot;actor&quot;: &quot;SDNR&quot;,&#xd;
                  &quot;operation&quot;: &quot;ModifyO1Config&quot;,&#xd;
                  &quot;target&quot;: {&#xd;
                    &quot;targetType&quot;: &quot;PNF&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;timeout&quot;: 60,&#xd;
                &quot;retries&quot;: 0,&#xd;
                &quot;success&quot;: &quot;final_success&quot;,&#xd;
                &quot;failure&quot;: &quot;final_failure&quot;,&#xd;
                &quot;failure_timeout&quot;: &quot;final_failure_timeout&quot;,&#xd;
                &quot;failure_retries&quot;: &quot;final_failure_retries&quot;,&#xd;
                &quot;failure_exception&quot;: &quot;final_failure_exception&quot;,&#xd;
                &quot;failure_guard&quot;: &quot;final_failure_guard&quot;&#xd;
              }&#xd;
            ]&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create 5G SON A1 Policy" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.operational.common.Drools/versions/1.0.0/policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
      {&#xd;
        &quot;op.5g.son.a1&quot;: {&#xd;
          &quot;type&quot;: &quot;onap.policies.controlloop.operational.common.Drools&quot;,&#xd;
          &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;name&quot;: &quot;op.5g.son.a1&quot;,&#xd;
          &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;policy-id&quot;: &quot;op.5g.son.a1&quot;&#xd;
          },&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;id&quot;: &quot;ControlLoop-SONA1-7d4baf04-8875-4d1f-946d-06b874048b61&quot;,&#xd;
            &quot;timeout&quot;: 1200,&#xd;
            &quot;abatement&quot;: false,&#xd;
            &quot;trigger&quot;: &quot;modify-a1-policy&quot;,&#xd;
            &quot;operations&quot;: [&#xd;
              {&#xd;
                &quot;id&quot;: &quot;modify-a1-policy&quot;,&#xd;
                &quot;description&quot;: &quot;Control Loop Modify A1 Policy&quot;,&#xd;
                &quot;operation&quot;: {&#xd;
                  &quot;actor&quot;: &quot;SDNR&quot;,&#xd;
                  &quot;operation&quot;: &quot;ModifyA1Policy&quot;,&#xd;
                  &quot;target&quot;: {&#xd;
                    &quot;targetType&quot;: &quot;PNF&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;timeout&quot;: 60,&#xd;
                &quot;retries&quot;: 0,&#xd;
                &quot;success&quot;: &quot;final_success&quot;,&#xd;
                &quot;failure&quot;: &quot;final_failure&quot;,&#xd;
                &quot;failure_timeout&quot;: &quot;final_failure_timeout&quot;,&#xd;
                &quot;failure_retries&quot;: &quot;final_failure_retries&quot;,&#xd;
                &quot;failure_exception&quot;: &quot;final_failure_exception&quot;,&#xd;
                &quot;failure_guard&quot;: &quot;final_failure_guard&quot;&#xd;
              }&#xd;
            ]&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PAP"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PAP Healthcheck">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">/policy/pap/v1/healthcheck</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion">
              <stringProp name="JSON_PATH">$.healthy</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy vCPE Policy">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;policies&quot;:[{&quot;policy-id&quot;:&quot;operational.restart&quot;, &quot;version&quot;: &quot;1.0.0&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy 5G SON O1">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;policies&quot;:[{&quot;policy-id&quot;:&quot;op.5g.son.o1&quot;, &quot;version&quot;: &quot;1.0.0&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy 5G SON A1">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;policies&quot;:[{&quot;policy-id&quot;:&quot;op.5g.son.a1&quot;, &quot;version&quot;: &quot;1.0.0&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="vCPE SUCCESS">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <longProp name="ThreadGroup.delay">11</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Set consumer group per scenario" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-308835287">consumerGroup</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1571164782">
              <stringProp name="-2075285407">vcpesuccess</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">Global to the thread group</stringProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Set request id per cycle">
          <collectionProp name="UserParameters.names">
            <stringProp name="693933066">requestId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="681405977">
              <stringProp name="118040362">${__UUID()}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
          <stringProp name="TestPlan.comments">Update on a per iteration basis</stringProp>
        </UserParameters>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DCAE[dcae-topic]: ONSET">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.StringSerializer

// Kafka producer configuration
def props = new Properties()
props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.CLIENT_ID_CONFIG, &quot;dcae-topic-producer&quot;)

// Create Kafka producer
def producer = new KafkaProducer&lt;&gt;(props)

// Prepare the message
def message = &quot;&quot;&quot;
{
  &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,
  &quot;closedLoopAlarmStart&quot;: 1463679805324,
  &quot;closedLoopEventClient&quot;: &quot;DCAE_INSTANCE_ID.dcae-tca&quot;,
  &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;,
  &quot;requestID&quot;: &quot;${requestId}&quot;,
  &quot;target_type&quot;: &quot;VNF&quot;,
  &quot;target&quot;: &quot;generic-vnf.vnf-id&quot;,
  &quot;AAI&quot;: {
    &quot;vserver.is-closed-loop-disabled&quot;: &quot;false&quot;,
    &quot;vserver.prov-status&quot;: &quot;ACTIVE&quot;,
    &quot;generic-vnf.vnf-id&quot;: &quot;vCPE_Infrastructure_vGMUX_demo_app&quot;
  },
  &quot;from&quot;: &quot;DCAE&quot;,
  &quot;version&quot;: &quot;1.0.2&quot;
}
&quot;&quot;&quot;.toString()

// Create a producer record
def record = new ProducerRecord&lt;&gt;(&quot;unauthenticated.dcae_cl_output&quot;, vars.get(&quot;requestId&quot;).toString(), message)

// Send the message
def future = producer.send(record)

// Wait for the send to complete and log the result
def metadata = future.get()
log.info(&quot;Message sent to topic: ${metadata.topic()}, partition: ${metadata.partition()}, offset: ${metadata.offset()}&quot;)

// Close the producer
producer.close()

// Set a variable to indicate successful sending
vars.put(&quot;messageSent&quot;, &quot;true&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init Kafka Counter">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;counter&quot;, &quot;0&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="APPCL Restart Loop Controller">
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read kafka topic">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration

// Kafka consumer configuration
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ConsumerConfig.GROUP_ID_CONFIG, vars.get(&quot;consumerGroup&quot;))
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;)

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

try {
    // Subscribe to the topic
    consumer.subscribe(Arrays.asList(&quot;appc-lcm-read&quot;))

    // Poll for records
    def records = consumer.poll(Duration.ofMillis(15000))

    if (records.isEmpty()) {
        log.warn(&quot;No records found within the timeout period&quot;)
        vars.put(&quot;messageConsumed&quot;, &quot;false&quot;)
    } else {
        // Process the first record
        def record = records.first()
        def requestId = record.key()
        def value = record.value()
        
        // Store the entire message
        vars.put(&quot;kafkaMessage&quot;, value)
        
        // Parse the value
        def jsonSlurper = new groovy.json.JsonSlurper()
        def parsedValue = jsonSlurper.parseText(value)
        
        // Extract required fields
        vars.put(&quot;requestIdOnset&quot;, parsedValue[&quot;request-id&quot;])
        vars.put(&quot;correlationId&quot;, parsedValue[&quot;correlation-id&quot;])
        vars.put(&quot;subRequestId&quot;, parsedValue[&quot;sub-request-id&quot;])
        
        // Log the extracted information
        log.info(&quot;RequestId: &quot; + requestId)
        log.info(&quot;Parsed Value: &quot; + parsedValue)
        
        vars.put(&quot;messageConsumed&quot;, &quot;true&quot;)
    }
} catch (Exception e) {
    log.error(&quot;Error processing Kafka message: &quot; + e.getMessage())
    vars.put(&quot;messageConsumed&quot;, &quot;false&quot;)
} finally {
    // Close the consumer
    consumer.close()
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="requestId extractor">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;requestIdOnset&quot;, parsedMessage.requestId ?: &quot;none&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="notification extractor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;notification&quot;, parsedMessage.notification ?: &quot;none&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.kafka.clients.consumer.ConsumerRecord

// Assuming the Kafka message is stored in a variable named &apos;kafkaMessage&apos;
ConsumerRecord&lt;String, String&gt; record = vars.getObject(&quot;kafkaMessage&quot;)

String requestIdOnset = record.key()
String requestId = vars.get(&quot;requestId&quot;)
String correlationId = &quot;none&quot;
String subRequestId = &quot;none&quot;
String counter = vars.get(&quot;counter&quot;)

String transaction = &quot;none&quot;

// Parse the Kafka message value (assuming it&apos;s JSON)
def jsonSlurper = new groovy.json.JsonSlurper()
def messageContent = jsonSlurper.parseText(record.value())

if (messageContent.containsKey(&quot;correlation-id&quot;)) {
    correlationId = messageContent[&quot;correlation-id&quot;]
}
if (messageContent.containsKey(&quot;sub-request-id&quot;)) {
    subRequestId = messageContent[&quot;sub-request-id&quot;]
}

log.info(&quot;The requestId is &quot; + requestId)
log.info(&quot;The requestIdOnset is &quot; + requestIdOnset)
log.info(&quot;The correlation id is &quot; + correlationId)
log.info(&quot;The subrequest id is &quot; + subRequestId)
log.info(&quot;The counter is &quot; + counter)

if (requestId == requestIdOnset) {
    if (correlationId == &quot;none&quot; || subRequestId == &quot;none&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Failure Transaction&quot;)
        AssertionResult.setFailureMessage(&quot;Missing correlationId or subRequestId&quot;)
        AssertionResult.setFailure(true)
    } else {
        transaction = &quot;FINAL&quot;
        vars.put(&quot;transaction&quot;, &quot;FINAL&quot;)
        log.info(&quot;Final Success Transaction&quot;)
    }
}

int counterTemp = Integer.parseInt(counter) + 1
if (transaction == &quot;FINAL&quot;) {
    counterTemp = 99
} else if (counterTemp &gt;= 10) {
    AssertionResult.setFailureMessage(&quot;vCPE Success APPCL Failure, reached maximum number of 10 attempts&quot;)
    AssertionResult.setFailure(true)
}

vars.put(&quot;counter&quot;, Integer.toString(counterTemp))
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="APPC [appc-lcm-read]: SUCCESS">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.StringSerializer

// Kafka producer configuration
def props = new Properties()
props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.CLIENT_ID_CONFIG, &quot;appc-lcm-write-producer&quot;)

// Create Kafka producer
def producer = new KafkaProducer&lt;&gt;(props)

// Prepare the message
def message = &quot;&quot;&quot;
{
    &quot;body&quot;: {
        &quot;output&quot;: {
            &quot;common-header&quot;: {
                &quot;timestamp&quot;: &quot;${new Date().format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;, TimeZone.getTimeZone(&quot;UTC&quot;))}&quot;,
                &quot;api-ver&quot;: &quot;2.00&quot;,
                &quot;originator-id&quot;: &quot;${vars.get(&quot;requestId&quot;)}&quot;,
                &quot;request-id&quot;: &quot;${vars.get(&quot;requestId&quot;)}&quot;,
                &quot;sub-request-id&quot;: &quot;${vars.get(&quot;subRequestId&quot;)}&quot;,
                &quot;flags&quot;: {}
            },
            &quot;status&quot;: {
                &quot;code&quot;: 400,
                &quot;message&quot;: &quot;Restart Successful&quot;
            }
        }
    },
    &quot;version&quot;: &quot;2.0&quot;,
    &quot;rpc-name&quot;: &quot;restart&quot;,
    &quot;correlation-id&quot;: &quot;${vars.get(&quot;correlationId&quot;)}&quot;,
    &quot;type&quot;: &quot;response&quot;
}
&quot;&quot;&quot;.toString()

// Create a producer record
def record = new ProducerRecord&lt;&gt;(&quot;appc-lcm-write&quot;, vars.get(&quot;requestId&quot;).toString(), message)

// Send the message
def future = producer.send(record)

// Wait for the send to complete and log the result
def metadata = future.get()
log.info(&quot;Message sent to topic: ${metadata.topic()}, partition: ${metadata.partition()}, offset: ${metadata.offset()}&quot;)

// Close the producer
producer.close()

// Set a variable to indicate successful sending
vars.put(&quot;messageSent&quot;, &quot;true&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Final Success Controller">
          <stringProp name="WhileController.condition">${__javaScript(${counter} &lt; 60)}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="POLICY [policy-cl-mgt]: FINAL_SUCCESS">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration

// Kafka consumer configuration
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ConsumerConfig.GROUP_ID_CONFIG, vars.get(&quot;consumerGroup&quot;))
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;)

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

// Subscribe to the topic
consumer.subscribe(Arrays.asList(&quot;policy-cl-mgt&quot;))

// Initialize variables
def maxAttempts = 60
def attempts = 0
def success = false

// Poll for records
while (attempts &lt; maxAttempts &amp;&amp; !success) {
    def records = consumer.poll(Duration.ofMillis(15000))
    
    for (record in records) {
        def value = record.value()
        log.info(&quot;Received message: &quot; + value)
        
        // Parse the value
        def jsonSlurper = new groovy.json.JsonSlurper()
        def parsedValue = jsonSlurper.parseText(value)
        
        // Extract required fields
        def requestId = parsedValue.requestId
        def notification = parsedValue.notification
        
        // Check if this is the message we&apos;re looking for
        if (requestId == vars.get(&quot;requestId&quot;) &amp;&amp; notification == &quot;FINAL: SUCCESS&quot;) {
            success = true
            log.info(&quot;Final Success: RequestId=&quot; + requestId + &quot;, Notification=&quot; + notification)
            break
        }
    }
    
    attempts++
    if (!success) {
        log.info(&quot;Attempt &quot; + attempts + &quot; of &quot; + maxAttempts + &quot; failed to find matching message&quot;)
    }
}

// Close the consumer
consumer.close()

// Set variables based on the result
if (success) {
    vars.put(&quot;finalStatus&quot;, &quot;SUCCESS&quot;)
} else {
    vars.put(&quot;finalStatus&quot;, &quot;FAILURE&quot;)
    AssertionResult.setFailureMessage(&quot;Failed to receive FINAL: SUCCESS notification after &quot; + maxAttempts + &quot; attempts&quot;)
    AssertionResult.setFailure(true)
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="requestId extractor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;requestIdOnset&quot;, parsedMessage.requestId ?: &quot;none&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="notification extractor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;notification&quot;, parsedMessage.notification ?: &quot;none&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

// Parse Kafka message content
def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

// Extract relevant fields
String requestIdOnset = parsedMessage.requestId
String notification = parsedMessage.notification
String requestId = vars.get(&quot;requestId&quot;)
String counter = vars.get(&quot;counter&quot;)
String transaction = &quot;none&quot;

// Log extracted information
log.info(&quot;The requestId is &quot; + requestId)
log.info(&quot;The requestIdOnset is &quot; + requestIdOnset)
log.info(&quot;The notification is &quot; + notification)
log.info(&quot;The counter is &quot; + counter)

// Perform assertions
if (requestId == requestIdOnset) {
    if (notification == &quot;SUCCESS&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Success Transaction&quot;)
    } else if (notification == &quot;FAILURE&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Failure Transaction&quot;)
        AssertionResult.setFailureMessage(&quot;Bad final notification&quot;)
        AssertionResult.setFailure(true)
    }
}

// Update counter
int counterTemp = Integer.parseInt(counter) + 1
if (transaction == &quot;FINAL&quot;) {
    counterTemp = 99
} else if (counterTemp &gt;= 60) {
    AssertionResult.setFailureMessage(&quot;vCPE Success POLICYCL Failure, reached maximum number of attempts&quot;)
    AssertionResult.setFailure(true)
}
vars.put(&quot;counter&quot;, Integer.toString(counterTemp))
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SON 01 Success">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <longProp name="ThreadGroup.delay">11</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Set consumer group per scenario" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-308835287">consumerGroup</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1059733039">
              <stringProp name="109619924">sonO1</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">Global to the thread group</stringProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Set request id per cycle" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="693933066">requestId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="681405977">
              <stringProp name="118040362">${__UUID()}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
          <stringProp name="TestPlan.comments">Update on a per iteration basis</stringProp>
        </UserParameters>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DCAE[dcae-topic]: ONSET">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.StringSerializer

// Kafka producer configuration
def props = new Properties()
props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.CLIENT_ID_CONFIG, &quot;dcae-topic-producer&quot;)

// Create Kafka producer
def producer = new KafkaProducer&lt;&gt;(props)

// Prepare the message
def message = &quot;&quot;&quot;
{
  &quot;closedLoopControlName&quot;: &quot;ControlLoop-SONO1-fb41f388-a5f2-11e8-98d0-529269fb1459&quot;,
  &quot;closedLoopAlarmStart&quot;: 1606806580487,
  &quot;closedLoopEventClient&quot;: &quot;microservice.PCI&quot;,
  &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;,
  &quot;requestID&quot;: &quot;${requestId}&quot;,
  &quot;target_type&quot;: &quot;PNF&quot;,
  &quot;target&quot;: &quot;pnf.pnf-name&quot;,
  &quot;AAI&quot;: {
    &quot;generic-vnf.prov-status&quot;: &quot;ACTIVE&quot;,
    &quot;generic-vnf.is-closed-loop-disabled&quot;: &quot;false&quot;,
    &quot;pnf.pnf-name&quot;: &quot;ncserver1&quot;
  },  
  &quot;from&quot;: &quot;PCIMS&quot;,
  &quot;version&quot;: &quot;1.0.2&quot;,
  &quot;policyName&quot;: &quot;SONO1&quot;,
  &quot;policyVersion&quot;: &quot;1.0.2&quot;,
  &quot;Action&quot;: &quot;ModifyO1Config&quot;,
  &quot;payload&quot;: &quot;{\&quot;Configurations\&quot;:[{\&quot;data\&quot;:{\&quot;FAPService\&quot;:{\&quot;alias\&quot;:\&quot;Chn0330\&quot;,\&quot;X0005b9Lte\&quot;:{\&quot;phyCellIdInUse\&quot;:6,\&quot;pnfName\&quot;:\&quot;ncserver23\&quot;},\&quot;CellConfig\&quot;:{\&quot;LTE\&quot;:{\&quot;RAN\&quot;:{\&quot;Common\&quot;:{\&quot;CellIdentity\&quot;:\&quot;Chn0330\&quot;}}}}}}},{\&quot;data\&quot;:{\&quot;FAPService\&quot;:{\&quot;alias\&quot;:\&quot;Chn0331\&quot;,\&quot;X0005b9Lte\&quot;:{\&quot;phyCellIdInUse\&quot;:7,\&quot;pnfName\&quot;:\&quot;ncserver23\&quot;},\&quot;CellConfig\&quot;:{\&quot;LTE\&quot;:{\&quot;RAN\&quot;:{\&quot;Common\&quot;:{\&quot;CellIdentity\&quot;:\&quot;Chn0331\&quot;}}}}}}}]}&quot;
}
&quot;&quot;&quot;.toString()

// Create a producer record
def record = new ProducerRecord&lt;&gt;(&quot;unauthenticated.dcae_cl_output&quot;, vars.get(&quot;requestId&quot;).toString(), message)

// Send the message
def future = producer.send(record)

// Wait for the send to complete and log the result
def metadata = future.get()
log.info(&quot;Message sent to topic: ${metadata.topic()}, partition: ${metadata.partition()}, offset: ${metadata.offset()}&quot;)

// Close the producer
producer.close()

// Set a variable to indicate successful sending
vars.put(&quot;messageSent&quot;, &quot;true&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init Kafka Counter">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;counter01&quot;, &quot;0&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="SDNR-CL Modify Config">
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read kafka topic">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration

// Kafka consumer configuration
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ConsumerConfig.GROUP_ID_CONFIG, vars.get(&quot;consumerGroup&quot;))
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;)

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

try {
    // Subscribe to the topic
    consumer.subscribe(Arrays.asList(&quot;SDNR-CL&quot;))

    // Poll for records
    def records = consumer.poll(Duration.ofMillis(15000))

    if (records.isEmpty()) {
        log.warn(&quot;No records found within the timeout period&quot;)
        vars.put(&quot;messageConsumed&quot;, &quot;false&quot;)
    } else {
        // Process the first record
        def record = records.first()
        def requestId = record.key()
        def value = record.value()
        
        // Store the entire message
        vars.put(&quot;kafkaMessage&quot;, value)
        
        // Parse the value
        def jsonSlurper = new groovy.json.JsonSlurper()
        def parsedValue = jsonSlurper.parseText(value)
        
        // Extract required fields
        vars.put(&quot;requestIdOnset&quot;, parsedValue[&quot;request-id&quot;])
        vars.put(&quot;correlationId&quot;, parsedValue[&quot;correlation-id&quot;])
        vars.put(&quot;subRequestId&quot;, parsedValue[&quot;sub-request-id&quot;])
        
        // Log the extracted information
        log.info(&quot;RequestId: &quot; + requestId)
        log.info(&quot;Parsed Value: &quot; + parsedValue)
        
        vars.put(&quot;messageConsumed&quot;, &quot;true&quot;)
    }
} catch (Exception e) {
    log.error(&quot;Error processing Kafka message: &quot; + e.getMessage())
    vars.put(&quot;messageConsumed&quot;, &quot;false&quot;)
} finally {
    // Close the consumer
    consumer.close()
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="requestId extractor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;requestIdOnset&quot;, parsedMessage.requestId ?: &quot;none&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="notification extractor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;notification&quot;, parsedMessage.notification ?: &quot;none&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.kafka.clients.consumer.ConsumerRecord

// Assuming the Kafka message is stored in a variable named &apos;kafkaMessage&apos;
ConsumerRecord&lt;String, String&gt; record = vars.getObject(&quot;kafkaMessage&quot;)

String requestIdOnset = record.key()
String requestId = vars.get(&quot;requestId&quot;)
String correlationId = &quot;none&quot;
String subRequestId = &quot;none&quot;
String counter = vars.get(&quot;counter&quot;)

String transaction = &quot;none&quot;

// Parse the Kafka message value (assuming it&apos;s JSON)
def jsonSlurper = new groovy.json.JsonSlurper()
def messageContent = jsonSlurper.parseText(record.value())

if (messageContent.containsKey(&quot;correlation-id&quot;)) {
    correlationId = messageContent[&quot;correlation-id&quot;]
}
if (messageContent.containsKey(&quot;sub-request-id&quot;)) {
    subRequestId = messageContent[&quot;sub-request-id&quot;]
}

log.info(&quot;The requestId is &quot; + requestId)
log.info(&quot;The requestIdOnset is &quot; + requestIdOnset)
log.info(&quot;The correlation id is &quot; + correlationId)
log.info(&quot;The subrequest id is &quot; + subRequestId)
log.info(&quot;The counter is &quot; + counter)

if (requestId == requestIdOnset) {
    if (correlationId == &quot;none&quot; || subRequestId == &quot;none&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Failure Transaction&quot;)
        AssertionResult.setFailureMessage(&quot;Missing correlationId or subRequestId&quot;)
        AssertionResult.setFailure(true)
    } else {
        transaction = &quot;FINAL&quot;
        vars.put(&quot;transaction&quot;, &quot;FINAL&quot;)
        log.info(&quot;Final Success Transaction&quot;)
    }
}

int counterTemp = Integer.parseInt(counter) + 1
if (transaction == &quot;FINAL&quot;) {
    counterTemp = 99
} else if (counterTemp &gt;= 10) {
    AssertionResult.setFailureMessage(&quot;SON 01 Failure, reached maximum number of 10 attempts&quot;)
    AssertionResult.setFailure(true)
}

vars.put(&quot;counter01&quot;, Integer.toString(counterTemp))
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SDNR[SDNR-CL-RSP]: SUCCESS">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.StringSerializer

// Kafka producer configuration
def props = new Properties()
props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.CLIENT_ID_CONFIG, &quot;sdnr-cl-rsp-producer&quot;)

// Create Kafka producer
def producer = new KafkaProducer&lt;&gt;(props)

// Prepare the message
def message = &quot;&quot;&quot;
{
    &quot;body&quot;: {
        &quot;output&quot;: {
            &quot;CommonHeader&quot;: {
                &quot;TimeStamp&quot;: &quot;2022-08-10T07:10:05.614Z&quot;,
                &quot;APIver&quot;: &quot;1.0&quot;,
                &quot;RequestID&quot;: &quot;${requestId}&quot;,
                &quot;SubRequestID&quot;: &quot;${subRequestId}&quot;,
                &quot;RequestTrack&quot;: [],
                &quot;Flags&quot;: []
            },
            &quot;Status&quot;: {
                &quot;Code&quot;: 200,
                &quot;Value&quot;: &quot;SUCCESS&quot;
            },
            &quot;Payload&quot;: &quot;{ \&quot;Configurations\&quot;:[ { \&quot;Status\&quot;: { \&quot;Code\&quot;: 200, \&quot;Value\&quot;: \&quot;SUCCESS\&quot; }, \&quot;data\&quot;:{\&quot;FAPService\&quot;:{\&quot;alias\&quot;:\&quot;Chn0330\&quot;,\&quot;X0005b9Lte\&quot;:{\&quot;phyCellIdInUse\&quot;:6,\&quot;pnfName\&quot;:\&quot;ncserver23\&quot;},\&quot;CellConfig\&quot;:{\&quot;LTE\&quot;:{\&quot;RAN\&quot;:{\&quot;Common\&quot;:{\&quot;CellIdentity\&quot;:\&quot;Chn0330\&quot;}}}}}} } ] }&quot;
        }
    },
    &quot;version&quot;: &quot;1.0&quot;,
    &quot;rpc-name&quot;: &quot;ModifyO1Config&quot;,
    &quot;correlation-id&quot;: &quot;${correlationId}&quot;,
    &quot;type&quot;: &quot;response&quot;
}
&quot;&quot;&quot;.toString()

// Create a producer record
def record = new ProducerRecord&lt;&gt;(&quot;sdnr-cl-rsp&quot;, vars.get(&quot;requestId&quot;).toString(), message)

// Send the message
def future = producer.send(record)

// Wait for the send to complete and log the result
def metadata = future.get()
log.info(&quot;Message sent to topic: ${metadata.topic()}, partition: ${metadata.partition()}, offset: ${metadata.offset()}&quot;)

// Close the producer
producer.close()

// Set a variable to indicate successful sending
vars.put(&quot;messageSent&quot;, &quot;true&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init Kafka Counter">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;counter01&quot;, &quot;0&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Final Success Controller">
          <stringProp name="WhileController.condition">${__javaScript(${counter} &lt; 60)}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="POLICY [policy-cl-mgt]: FINAL_SUCCESS">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration

// Kafka consumer configuration
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ConsumerConfig.GROUP_ID_CONFIG, vars.get(&quot;consumerGroup&quot;))
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;)

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

// Subscribe to the topic
consumer.subscribe(Arrays.asList(&quot;policy-cl-mgt&quot;))

// Initialize variables
def maxAttempts = 60
def attempts = 0
def success = false

// Poll for records
while (attempts &lt; maxAttempts &amp;&amp; !success) {
    def records = consumer.poll(Duration.ofMillis(15000))
    
    for (record in records) {
        def value = record.value()
        log.info(&quot;Received message: &quot; + value)
        
        // Parse the value
        def jsonSlurper = new groovy.json.JsonSlurper()
        def parsedValue = jsonSlurper.parseText(value)
        
        // Extract required fields
        def requestId = parsedValue.requestId
        def notification = parsedValue.notification
        
        // Check if this is the message we&apos;re looking for
        if (requestId == vars.get(&quot;requestId&quot;) &amp;&amp; notification == &quot;FINAL: SUCCESS&quot;) {
            success = true
            log.info(&quot;Final Success: RequestId=&quot; + requestId + &quot;, Notification=&quot; + notification)
            break
        }
    }
    
    attempts++
    if (!success) {
        log.info(&quot;Attempt &quot; + attempts + &quot; of &quot; + maxAttempts + &quot; failed to find matching message&quot;)
    }
}

// Close the consumer
consumer.close()

// Set variables based on the result
if (success) {
    vars.put(&quot;finalStatus&quot;, &quot;SUCCESS&quot;)
} else {
    vars.put(&quot;finalStatus&quot;, &quot;FAILURE&quot;)
    AssertionResult.setFailureMessage(&quot;Failed to receive FINAL: SUCCESS notification after &quot; + maxAttempts + &quot; attempts&quot;)
    AssertionResult.setFailure(true)
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="requestId extractor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;requestIdOnset&quot;, parsedMessage.requestId ?: &quot;none&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="notification extractor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;notification&quot;, parsedMessage.notification ?: &quot;none&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

// Parse Kafka message content
def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

// Extract relevant fields
String requestIdOnset = parsedMessage.requestId
String notification = parsedMessage.notification
String requestId = vars.get(&quot;requestId&quot;)
String counter = vars.get(&quot;counter&quot;)
String transaction = &quot;none&quot;

// Log extracted information
log.info(&quot;The requestId is &quot; + requestId)
log.info(&quot;The requestIdOnset is &quot; + requestIdOnset)
log.info(&quot;The notification is &quot; + notification)
log.info(&quot;The counter is &quot; + counter)

// Perform assertions
if (requestId == requestIdOnset) {
    if (notification == &quot;SUCCESS&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Success Transaction&quot;)
    } else if (notification == &quot;FAILURE&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Failure Transaction&quot;)
        AssertionResult.setFailureMessage(&quot;Bad final notification&quot;)
        AssertionResult.setFailure(true)
    }
}

// Update counter
int counterTemp = Integer.parseInt(counter) + 1
if (transaction == &quot;FINAL&quot;) {
    counterTemp = 99
} else if (counterTemp &gt;= 60) {
    AssertionResult.setFailureMessage(&quot;vCPE Success POLICYCL Failure, reached maximum number of attempts&quot;)
    AssertionResult.setFailure(true)
}
vars.put(&quot;counter01&quot;, Integer.toString(counterTemp))
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SON A1 Success">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <longProp name="ThreadGroup.delay">11</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Set consumer group per scenario" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-308835287">consumerGroup</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1059733039">
              <stringProp name="109619924">sonO1</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">Global to the thread group</stringProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Set request id per cycle" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="693933066">requestId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="681405977">
              <stringProp name="118040362">${__UUID()}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
          <stringProp name="TestPlan.comments">Update on a per iteration basis</stringProp>
        </UserParameters>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DCAE[dcae-topic]: ONSET">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.StringSerializer

// Kafka producer configuration
def props = new Properties()
props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.CLIENT_ID_CONFIG, &quot;dcae-topic-producer&quot;)

// Create Kafka producer
def producer = new KafkaProducer&lt;&gt;(props)

// Prepare the message
def message = &quot;&quot;&quot;
{
  &quot;closedLoopControlName&quot;: &quot;ControlLoop-SONA1-7d4baf04-8875-4d1f-946d-06b874048b61&quot;,
  &quot;closedLoopAlarmStart&quot;: 1606805921693,
  &quot;closedLoopEventClient&quot;: &quot;microservice.SONH&quot;,
  &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;,
  &quot;requestID&quot;: &quot;${requestId}&quot;,
  &quot;target_type&quot;: &quot;PNF&quot;,
  &quot;target&quot;: &quot;pnf.pnf-name&quot;,
  &quot;AAI&quot;: {
    &quot;generic-vnf.prov-status&quot;: &quot;ACTIVE&quot;,
    &quot;generic-vnf.is-closed-loop-disabled&quot;: &quot;false&quot;,
    &quot;pnf.pnf-name&quot;: &quot;ncserver2&quot;
  },
  &quot;from&quot;: &quot;SONHMS&quot;,
  &quot;version&quot;: &quot;1.0.2&quot;,
  &quot;policyName&quot;: &quot;SONA1&quot;,
  &quot;policyVersion&quot;: &quot;1.0.2&quot;,
  &quot;Action&quot;: &quot;ModifyA1Policy&quot;,
  &quot;payload&quot;: &quot;{ \&quot;Configurations\&quot;:[ { \&quot;data\&quot;:{ \&quot;FAPService\&quot;:{ \&quot;alias\&quot;:\&quot;Cell1\&quot;, \&quot;CellConfig\&quot;:{ \&quot;LTE\&quot;:{ \&quot;RAN\&quot;:{ \&quot;Common\&quot;:{ \&quot;CellIdentity\&quot;:\&quot;1\&quot; }, \&quot;NeighborListInUse\&quot; : { \&quot;LTECellNumberOfEntries\&quot; : \&quot;1\&quot; , \&quot;LTECell\&quot; : [{ \&quot;PLMNID\&quot; :\&quot;plmnid1\&quot;, \&quot;CID\&quot;:\&quot;Chn0001\&quot;, \&quot;PhyCellID\&quot;:\&quot;3\&quot;, \&quot;PNFName\&quot;:\&quot;ncserver01\&quot;, \&quot;Blacklisted\&quot;:\&quot;false\&quot;}] } } } } } } } ] }&quot;
}
&quot;&quot;&quot;.toString()

// Create a producer record
def record = new ProducerRecord&lt;&gt;(&quot;unauthenticated.dcae_cl_output&quot;, vars.get(&quot;requestId&quot;).toString(), message)

// Send the message
def future = producer.send(record)

// Wait for the send to complete and log the result
def metadata = future.get()
log.info(&quot;Message sent to topic: ${metadata.topic()}, partition: ${metadata.partition()}, offset: ${metadata.offset()}&quot;)

// Close the producer
producer.close()

// Set a variable to indicate successful sending
vars.put(&quot;messageSent&quot;, &quot;true&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init Kafka Counter" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;counter01&quot;, &quot;0&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="SDNR-CL Modify A1 Config">
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read kafka topic" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration

// Kafka consumer configuration
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ConsumerConfig.GROUP_ID_CONFIG, vars.get(&quot;consumerGroup&quot;))
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;)

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

try {
    // Subscribe to the topic
    consumer.subscribe(Arrays.asList(&quot;SDNR-CL&quot;))

    // Poll for records
    def records = consumer.poll(Duration.ofMillis(15000))

    if (records.isEmpty()) {
        log.warn(&quot;No records found within the timeout period&quot;)
        vars.put(&quot;messageConsumed&quot;, &quot;false&quot;)
    } else {
        // Process the first record
        def record = records.first()
        def requestId = record.key()
        def value = record.value()
        
        // Store the entire message
        vars.put(&quot;kafkaMessage&quot;, value)
        
        // Parse the value
        def jsonSlurper = new groovy.json.JsonSlurper()
        def parsedValue = jsonSlurper.parseText(value)
        
        // Extract required fields
        vars.put(&quot;requestIdOnset&quot;, parsedValue[&quot;request-id&quot;])
        vars.put(&quot;correlationId&quot;, parsedValue[&quot;correlation-id&quot;])
        vars.put(&quot;subRequestId&quot;, parsedValue[&quot;sub-request-id&quot;])
        
        // Log the extracted information
        log.info(&quot;RequestId: &quot; + requestId)
        log.info(&quot;Parsed Value: &quot; + parsedValue)
        
        vars.put(&quot;messageConsumed&quot;, &quot;true&quot;)
    }
} catch (Exception e) {
    log.error(&quot;Error processing Kafka message: &quot; + e.getMessage())
    vars.put(&quot;messageConsumed&quot;, &quot;false&quot;)
} finally {
    // Close the consumer
    consumer.close()
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="requestId extractor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;requestIdOnset&quot;, parsedMessage.requestId ?: &quot;none&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="notification extractor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;notification&quot;, parsedMessage.notification ?: &quot;none&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.kafka.clients.consumer.ConsumerRecord

// Assuming the Kafka message is stored in a variable named &apos;kafkaMessage&apos;
ConsumerRecord&lt;String, String&gt; record = vars.getObject(&quot;kafkaMessage&quot;)

String requestIdOnset = record.key()
String requestId = vars.get(&quot;requestId&quot;)
String correlationId = &quot;none&quot;
String subRequestId = &quot;none&quot;
String counter = vars.get(&quot;counter&quot;)

String transaction = &quot;none&quot;

// Parse the Kafka message value (assuming it&apos;s JSON)
def jsonSlurper = new groovy.json.JsonSlurper()
def messageContent = jsonSlurper.parseText(record.value())

if (messageContent.containsKey(&quot;correlation-id&quot;)) {
    correlationId = messageContent[&quot;correlation-id&quot;]
}
if (messageContent.containsKey(&quot;sub-request-id&quot;)) {
    subRequestId = messageContent[&quot;sub-request-id&quot;]
}

log.info(&quot;The requestId is &quot; + requestId)
log.info(&quot;The requestIdOnset is &quot; + requestIdOnset)
log.info(&quot;The correlation id is &quot; + correlationId)
log.info(&quot;The subrequest id is &quot; + subRequestId)
log.info(&quot;The counter is &quot; + counter)

if (requestId == requestIdOnset) {
    if (correlationId == &quot;none&quot; || subRequestId == &quot;none&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Failure Transaction&quot;)
        AssertionResult.setFailureMessage(&quot;Missing correlationId or subRequestId&quot;)
        AssertionResult.setFailure(true)
    } else {
        transaction = &quot;FINAL&quot;
        vars.put(&quot;transaction&quot;, &quot;FINAL&quot;)
        log.info(&quot;Final Success Transaction&quot;)
    }
}

int counterTemp = Integer.parseInt(counter) + 1
if (transaction == &quot;FINAL&quot;) {
    counterTemp = 99
} else if (counterTemp &gt;= 10) {
    AssertionResult.setFailureMessage(&quot;SON A1 Failure, reached maximum number of 10 attempts&quot;)
    AssertionResult.setFailure(true)
}

vars.put(&quot;counter01&quot;, Integer.toString(counterTemp))
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SDNR[SDNR-CL-RSP]: SUCCESS">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.StringSerializer

// Kafka producer configuration
def props = new Properties()
props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.CLIENT_ID_CONFIG, &quot;sdnr-cl-rsp-producer&quot;)

// Create Kafka producer
def producer = new KafkaProducer&lt;&gt;(props)

// Prepare the message
def message = &quot;&quot;&quot;
{
    &quot;body&quot;: {
        &quot;output&quot;: {
            &quot;CommonHeader&quot;: {
                &quot;TimeStamp&quot;: &quot;2022-08-10T07:10:05.614Z&quot;,
                &quot;APIver&quot;: &quot;1.0&quot;,
                &quot;RequestID&quot;: &quot;${requestId}&quot;,
                &quot;SubRequestID&quot;: &quot;${subRequestId}&quot;,
                &quot;RequestTrack&quot;: [],
                &quot;Flags&quot;: []
            },
            &quot;Status&quot;: {
                &quot;Code&quot;: 200,
                &quot;Value&quot;: &quot;SUCCESS&quot;
            },
            &quot;Payload&quot;: &quot;{ \&quot;Configurations\&quot;:[ { \&quot;Status\&quot;: { \&quot;Code\&quot;: 200, \&quot;Value\&quot;: \&quot;SUCCESS\&quot; }, \&quot;data\&quot;:{\&quot;FAPService\&quot;:{\&quot;alias\&quot;:\&quot;Chn0330\&quot;,\&quot;X0005b9Lte\&quot;:{\&quot;phyCellIdInUse\&quot;:6,\&quot;pnfName\&quot;:\&quot;ncserver23\&quot;},\&quot;CellConfig\&quot;:{\&quot;LTE\&quot;:{\&quot;RAN\&quot;:{\&quot;Common\&quot;:{\&quot;CellIdentity\&quot;:\&quot;Chn0330\&quot;}}}}}} } ] }&quot;
        }
    },
    &quot;version&quot;: &quot;1.0&quot;,
    &quot;rpc-name&quot;: &quot;ModifyO1Config&quot;,
    &quot;correlation-id&quot;: &quot;${correlationId}&quot;,
    &quot;type&quot;: &quot;response&quot;
}
&quot;&quot;&quot;.toString()

// Create a producer record
def record = new ProducerRecord&lt;&gt;(&quot;sdnr-cl-rsp&quot;, vars.get(&quot;requestId&quot;).toString(), message)

// Send the message
def future = producer.send(record)

// Wait for the send to complete and log the result
def metadata = future.get()
log.info(&quot;Message sent to topic: ${metadata.topic()}, partition: ${metadata.partition()}, offset: ${metadata.offset()}&quot;)

// Close the producer
producer.close()

// Set a variable to indicate successful sending
vars.put(&quot;messageSent&quot;, &quot;true&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init Kafka Counter">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;counter01&quot;, &quot;0&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Final Success Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(${counter} &lt; 60)}</stringProp>
        </WhileController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="POLICY [policy-cl-mgt]: FINAL_SUCCESS" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration

// Kafka consumer configuration
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, vars.get(&quot;KAFKA_HOST&quot;) + &quot;:&quot; + vars.get(&quot;KAFKA_PORT&quot;))
props.put(ConsumerConfig.GROUP_ID_CONFIG, vars.get(&quot;consumerGroup&quot;))
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;)

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

// Subscribe to the topic
consumer.subscribe(Arrays.asList(&quot;policy-cl-mgt&quot;))

// Initialize variables
def maxAttempts = 60
def attempts = 0
def success = false

// Poll for records
while (attempts &lt; maxAttempts &amp;&amp; !success) {
    def records = consumer.poll(Duration.ofMillis(15000))
    
    for (record in records) {
        def value = record.value()
        log.info(&quot;Received message: &quot; + value)
        
        // Parse the value
        def jsonSlurper = new groovy.json.JsonSlurper()
        def parsedValue = jsonSlurper.parseText(value)
        
        // Extract required fields
        def requestId = parsedValue.requestId
        def notification = parsedValue.notification
        
        // Check if this is the message we&apos;re looking for
        if (requestId == vars.get(&quot;requestId&quot;) &amp;&amp; notification == &quot;FINAL: SUCCESS&quot;) {
            success = true
            log.info(&quot;Final Success: RequestId=&quot; + requestId + &quot;, Notification=&quot; + notification)
            break
        }
    }
    
    attempts++
    if (!success) {
        log.info(&quot;Attempt &quot; + attempts + &quot; of &quot; + maxAttempts + &quot; failed to find matching message&quot;)
    }
}

// Close the consumer
consumer.close()

// Set variables based on the result
if (success) {
    vars.put(&quot;finalStatus&quot;, &quot;SUCCESS&quot;)
} else {
    vars.put(&quot;finalStatus&quot;, &quot;FAILURE&quot;)
    AssertionResult.setFailureMessage(&quot;Failed to receive FINAL: SUCCESS notification after &quot; + maxAttempts + &quot; attempts&quot;)
    AssertionResult.setFailure(true)
}
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="requestId extractor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;requestIdOnset&quot;, parsedMessage.requestId ?: &quot;none&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="notification extractor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

vars.put(&quot;notification&quot;, parsedMessage.notification ?: &quot;none&quot;)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

// Parse Kafka message content
def message = vars.get(&quot;kafkaMessage&quot;)
def jsonSlurper = new JsonSlurper()
def parsedMessage = jsonSlurper.parseText(message)

// Extract relevant fields
String requestIdOnset = parsedMessage.requestId
String notification = parsedMessage.notification
String requestId = vars.get(&quot;requestId&quot;)
String counter = vars.get(&quot;counter&quot;)
String transaction = &quot;none&quot;

// Log extracted information
log.info(&quot;The requestId is &quot; + requestId)
log.info(&quot;The requestIdOnset is &quot; + requestIdOnset)
log.info(&quot;The notification is &quot; + notification)
log.info(&quot;The counter is &quot; + counter)

// Perform assertions
if (requestId == requestIdOnset) {
    if (notification == &quot;SUCCESS&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Success Transaction&quot;)
    } else if (notification == &quot;FAILURE&quot;) {
        transaction = &quot;FINAL&quot;
        log.info(&quot;Final Failure Transaction&quot;)
        AssertionResult.setFailureMessage(&quot;Bad final notification&quot;)
        AssertionResult.setFailure(true)
    }
}

// Update counter
int counterTemp = Integer.parseInt(counter) + 1
if (transaction == &quot;FINAL&quot;) {
    counterTemp = 99
} else if (counterTemp &gt;= 60) {
    AssertionResult.setFailureMessage(&quot;vCPE Success POLICYCL Failure, reached maximum number of attempts&quot;)
    AssertionResult.setFailure(true)
}
vars.put(&quot;counter01&quot;, Integer.toString(counterTemp))
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Tear down" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </PostThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PAP" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy vCPE Policy" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies/operational.restart/versions/1.0.0</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy 5G SON A1" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies/op.5g.son.a1/versions/1.0.0</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy 5G SON O1" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies/op.5g.son.o1/versions/1.0.0</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="API" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete vCPE Policy" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.operational.common.Drools/versions/1.0.0/policies/operational.restart/versions/1.0.0</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete 5G SON A1" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.operational.common.Drools/versions/1.0.0/policies/op.5g.son.a1/versions/1.0.0</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete 5G SON O1" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
            <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.operational.common.Drools/versions/1.0.0/policies/op.5g.son.o1/versions/1.0.0</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
